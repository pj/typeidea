// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Add a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\":
        return new Test_V1(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Add a field with a default value 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\";
    this.test_field = test_field || \\"A value\\";
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\":
        return new Test_V1(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Delete a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Adding another field
 * 3. didn't actually need that
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;

  constructor(test_field: string | null, test_field2: string) {
    this.version = 2;
    this.hash =
      \\"4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(message.test_field, message.test_field2);
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V3 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 3;
    this.hash =
      \\"d6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V3 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V3(message.test_field);
  }

  static serialize(message: Test_V3): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V3,
  Test_V3 as Test_Hd6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 | Test_V3 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
      case \\"Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\":
        return new Test_V2(message.test_field, message.test_field2);

      case \\"Test_V3\\":
      case \\"Test_Hd6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7\\":
        return new Test_V3(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2 | Test_V3): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Make a field optional 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Oops needed to make it optional
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string;

  constructor(test_field: string) {
    this.version = 1;
    this.hash =
      \\"3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 2;
    this.hash =
      \\"818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(message.test_field);
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_H818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
      case \\"Test_H818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b\\":
        return new Test_V2(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Multiple types with type reference 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * A useful type
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"9659ac19e906ee9398ce707fa0cf8f97270e3682752f5bf0db9b4d04d56c8b13\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H9659ac19e906ee9398ce707fa0cf8f97270e3682752f5bf0db9b4d04d56c8b13
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"c68b1dfae49d22c7332dcfcb86145926907e4171e3a7bb1f3861e9e3b0c2bdfb\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_Hc68b1dfae49d22c7332dcfcb86145926907e4171e3a7bb1f3861e9e3b0c2bdfb
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H9659ac19e906ee9398ce707fa0cf8f97270e3682752f5bf0db9b4d04d56c8b13\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_Hc68b1dfae49d22c7332dcfcb86145926907e4171e3a7bb1f3861e9e3b0c2bdfb\\":
        return new Test_V1(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

/*
 * Test2
 * a useful type
 * Change Log:
 * 0. Creating a new type
 * 1. asdf
 */
/**

*
* @sealed
*/
class Test2_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"397e7c8da31c488fa45bc5a48ae96359707455ce5054d2512134061ce28fae5c\\";
  }

  static deserialize(message: any): Test2_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test2_V0();
  }

  static serialize(message: Test2_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test2_V0,
  Test2_V0 as Test2_H397e7c8da31c488fa45bc5a48ae96359707455ce5054d2512134061ce28fae5c
};

/**
 * @param test_field2 A reference
 *
 * @sealed
 */
class Test2_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field2: Test.h_c68b1dfae49d22c7332dcfcb86145926907e4171e3a7bb1f3861e9e3b0c2bdfb;

  constructor(
    test_field2: Test.h_c68b1dfae49d22c7332dcfcb86145926907e4171e3a7bb1f3861e9e3b0c2bdfb
  ) {
    this.version = 1;
    this.hash =
      \\"d91d0ff7ca6ca8fafe09cc36bf88bf85d5fd3767f68717869c948825843d4aa1\\";
    this.test_field2 = test_field2;
  }

  static deserialize(message: any): Test2_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test2_V1(message.test_field2);
  }

  static serialize(message: Test2_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test2_V1,
  Test2_V1 as Test2_Hd91d0ff7ca6ca8fafe09cc36bf88bf85d5fd3767f68717869c948825843d4aa1
};

export class Test2 {
  static deserialize(message: any): Test2_V0 | Test2_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test2_V0\\":
      case \\"Test2_H397e7c8da31c488fa45bc5a48ae96359707455ce5054d2512134061ce28fae5c\\":
        return new Test2_V0();

      case \\"Test2_V1\\":
      case \\"Test2_Hd91d0ff7ca6ca8fafe09cc36bf88bf85d5fd3767f68717869c948825843d4aa1\\":
        return new Test2_V1(message.test_field2);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test2_V0 | Test2_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Rename a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Renaming a field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\";
    this.test_field = test_field || \\"A value\\";
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c
};

/**
 * @param renamed_field A field that helps testing
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly renamed_field: string | null;

  constructor(renamed_field: string | null) {
    this.version = 2;
    this.hash =
      \\"e41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf\\";
    this.renamed_field = renamed_field || \\"A value\\";
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(message.renamed_field);
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_He41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
      case \\"Test_He41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf\\":
        return new Test_V2(message.renamed_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Type with GroupAction 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Adding some stuff
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 * @param test_field3 Yet another field for testing
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;
  readonly test_field3: number;

  constructor(
    test_field: string | null,
    test_field2: string,
    test_field3: number
  ) {
    this.version = 2;
    this.hash =
      \\"e3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
    this.test_field3 = test_field3;
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(
      message.test_field,
      message.test_field2,
      message.test_field3
    );
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_He3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
      case \\"Test_He3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e\\":
        return new Test_V2(
          message.test_field,
          message.test_field2,
          message.test_field3
        );

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

/*
 * AnotherTest
 * AnotherTest
 * Change Log:
 * 0. Creating a another new type
 * 1. Adding a field
 * 2. Adding some stuff
 */
/**

*
* @sealed
*/
class AnotherTest_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"70b1897e2245989a8e866cca18de40266d5f2b1fe0d4922975d32564d74375ae\\";
  }

  static deserialize(message: any): AnotherTest_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new AnotherTest_V0();
  }

  static serialize(message: AnotherTest_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  AnotherTest_V0,
  AnotherTest_V0 as AnotherTest_H70b1897e2245989a8e866cca18de40266d5f2b1fe0d4922975d32564d74375ae
};

/**
 * @param another_field Another field that helps testing
 *
 * @sealed
 */
class AnotherTest_V1 {
  readonly version: number;
  readonly hash: string;
  readonly another_field: number;

  constructor(another_field: number) {
    this.version = 1;
    this.hash =
      \\"3060f8e1cfb84e4e955f33ec9c69b214dac76a61ad03e0dc3b8de8faab336469\\";
    this.another_field = another_field;
  }

  static deserialize(message: any): AnotherTest_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new AnotherTest_V1(message.another_field);
  }

  static serialize(message: AnotherTest_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  AnotherTest_V1,
  AnotherTest_V1 as AnotherTest_H3060f8e1cfb84e4e955f33ec9c69b214dac76a61ad03e0dc3b8de8faab336469
};

/**
 * @param another_field Another field that helps testing
 * @param another_test_field2 A field that helps testing, again
 * @param another_test_field3 Yet another field for testing
 *
 * @sealed
 */
class AnotherTest_V2 {
  readonly version: number;
  readonly hash: string;
  readonly another_field: number;
  readonly another_test_field2: string;
  readonly another_test_field3: number;

  constructor(
    another_field: number,
    another_test_field2: string,
    another_test_field3: number
  ) {
    this.version = 2;
    this.hash =
      \\"e3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e\\";
    this.another_field = another_field;
    this.another_test_field2 = another_test_field2 || \\"blah\\";
    this.another_test_field3 = another_test_field3;
  }

  static deserialize(message: any): AnotherTest_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new AnotherTest_V2(
      message.another_field,
      message.another_test_field2,
      message.another_test_field3
    );
  }

  static serialize(message: AnotherTest_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  AnotherTest_V2,
  AnotherTest_V2 as AnotherTest_He3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e
};

export class AnotherTest {
  static deserialize(
    message: any
  ): AnotherTest_V0 | AnotherTest_V1 | AnotherTest_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"AnotherTest_V0\\":
      case \\"AnotherTest_H70b1897e2245989a8e866cca18de40266d5f2b1fe0d4922975d32564d74375ae\\":
        return new AnotherTest_V0();

      case \\"AnotherTest_V1\\":
      case \\"AnotherTest_H3060f8e1cfb84e4e955f33ec9c69b214dac76a61ad03e0dc3b8de8faab336469\\":
        return new AnotherTest_V1(message.another_field);

      case \\"AnotherTest_V2\\":
      case \\"AnotherTest_He3bf60af0d85b87388ad398312c4f921dfdb689c424f67781391f34418e3404e\\":
        return new AnotherTest_V2(
          message.another_field,
          message.another_test_field2,
          message.another_test_field3
        );

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(
    message: AnotherTest_V0 | AnotherTest_V1 | AnotherTest_V2
  ): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Type with deprecated and dont generate 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Adding another field
 * 3. Adding yet another field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;

  constructor(test_field: string | null, test_field2: string) {
    this.version = 2;
    this.hash =
      \\"4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(message.test_field, message.test_field2);
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 * @param test_field3 Yet another field for testing
 *
 * @sealed
 */
class Test_V3 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;
  readonly test_field3: number;

  constructor(
    test_field: string | null,
    test_field2: string,
    test_field3: number
  ) {
    this.version = 3;
    this.hash =
      \\"abb52b859471c90b51d0b3103f4ce61cd35664c4e579b49597721df71fd6c655\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
    this.test_field3 = test_field3;
  }

  static deserialize(message: any): Test_V3 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V3(
      message.test_field,
      message.test_field2,
      message.test_field3
    );
  }

  static serialize(message: Test_V3): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V3,
  Test_V3 as Test_Habb52b859471c90b51d0b3103f4ce61cd35664c4e579b49597721df71fd6c655
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 | Test_V3 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\":
        return new Test_V0();

      case \\"Test_V1\\":
      case \\"Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
      case \\"Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\":
        return new Test_V2(message.test_field, message.test_field2);

      case \\"Test_V3\\":
      case \\"Test_Habb52b859471c90b51d0b3103f4ce61cd35664c4e579b49597721df71fd6c655\\":
        return new Test_V3(
          message.test_field,
          message.test_field2,
          message.test_field3
        );

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2 | Test_V3): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Type with latest 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Adding another field
 * 3. Adding yet another field
 */
/**

*
* @sealed
*/
class Test_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"b5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0();
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_Hb5f03e3c2f531b2cff4069b95676ebd5c476ecda61f7cadee48606639103eb05
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this.version = 1;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 *
 * @sealed
 */
class Test_V2 {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;

  constructor(test_field: string | null, test_field2: string) {
    this.version = 2;
    this.hash =
      \\"4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
  }

  static deserialize(message: any): Test_V2 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V2(message.test_field, message.test_field2);
  }

  static serialize(message: Test_V2): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V2,
  Test_V2 as Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0
};

/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 * @param test_field3 Yet another field for testing
 *
 * @sealed
 */
class Test_Latest {
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;
  readonly test_field3: number;

  constructor(
    test_field: string | null,
    test_field2: string,
    test_field3: number
  ) {
    this.version = null;
    this.hash = \\"null\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
    this.test_field3 = test_field3;
  }

  static deserialize(message: any): Test_Latest {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_Latest(
      message.test_field,
      message.test_field2,
      message.test_field3
    );
  }

  static serialize(message: Test_Latest): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export { Test_Latest };

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 | Test_V2 | Test_Latest {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
        return new Test_V0();

      case \\"Test_V1\\":
        return new Test_V1(message.test_field);

      case \\"Test_V2\\":
        return new Test_V2(message.test_field, message.test_field2);

      case \\"Test_Latest\\":
        return new Test_Latest(
          message.test_field,
          message.test_field2,
          message.test_field3
        );

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1 | Test_V2 | Test_Latest): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;
