// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Add a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.test_field);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d
};

export class Test {
  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H56fe5eaa9656364c83c84208b60dd08e81bc05eb37816cc21eb93618af57150d\\":
        return new Test_V0(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Add a field 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
"
`;

exports[`Add a field 3`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
import * as request from \\"request-promise-native\\";

import { Test, Test_V0 } from \\"./types\\";

export class Client {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
}
"
`;

exports[`Add a field with a default value 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\";
    this.test_field = test_field || \\"A value\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.test_field);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c
};

export class Test {
  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H036cb58d4009b695ef9c0a35e42cfd356c5ca922f3340d79db2364efd0d0da4c\\":
        return new Test_V0(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Add a field with a default value 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
"
`;

exports[`Add a field with a default value 3`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
import * as request from \\"request-promise-native\\";

import { Test, Test_V0 } from \\"./types\\";

export class Client {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
}
"
`;

exports[`Delete a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Adding another field
 * 3. didn't actually need that
 */
/**
 * @param test_field A field that helps testing
 * @param test_field2 A field that helps testing, again
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;
  readonly test_field2: string;

  constructor(test_field: string | null, test_field2: string) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\";
    this.test_field = test_field;
    this.test_field2 = test_field2 || \\"blah\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.test_field, message.test_field2);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this._type = \\"Test\\";
    this.version = 1;
    this.hash =
      \\"d6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_Hd6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H4ce3d4cfba96f0cdcce4bf1d2812eea0c5b1cf529ac93763f6f33d0600a652f0\\":
        return new Test_V0(message.test_field, message.test_field2);

      case \\"Test_V1\\":
      case \\"Test_Hd6cc2965f8ee5ebb6de4a255956c869a8c212bcc4d0bccf1dff40a440c2343f7\\":
        return new Test_V1(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Delete a field 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
"
`;

exports[`Delete a field 3`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
import * as request from \\"request-promise-native\\";

import { Test, Test_V0, Test_V1 } from \\"./types\\";

export class Client {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
}
"
`;

exports[`Make a field optional 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Oops needed to make it optional
 */
/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string;

  constructor(test_field: string) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.test_field);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14
};

/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V1 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this._type = \\"Test\\";
    this.version = 1;
    this.hash =
      \\"818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V1(message.test_field);
  }

  static serialize(message: Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V1,
  Test_V1 as Test_H818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b
};

export class Test {
  static deserialize(message: any): Test_V0 | Test_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H3b9ac56de579e9a69937f2d1d2c27a4cfbedfd0710682f8ab629b18aac4efe14\\":
        return new Test_V0(message.test_field);

      case \\"Test_V1\\":
      case \\"Test_H818de92c4372ef16f0eba77a342f97cd788f18b24d52b54a2870236d82184a0b\\":
        return new Test_V1(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0 | Test_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Make a field optional 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
"
`;

exports[`Make a field optional 3`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
import * as request from \\"request-promise-native\\";

import { Test, Test_V0, Test_V1 } from \\"./types\\";

export class Client {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
}
"
`;

exports[`Multiple types with type reference 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * a useful type
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 */
/**
 * @param test_field A field that helps testing
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field: string | null;

  constructor(test_field: string | null) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"31cd9f3eb7d5e94d9544cfdc740e0830bf68bff85ae4f81f0d25d0e4c9c7c499\\";
    this.test_field = test_field;
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.test_field);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_H31cd9f3eb7d5e94d9544cfdc740e0830bf68bff85ae4f81f0d25d0e4c9c7c499
};

export class Test {
  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_H31cd9f3eb7d5e94d9544cfdc740e0830bf68bff85ae4f81f0d25d0e4c9c7c499\\":
        return new Test_V0(message.test_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

/*
 * Test2
 * a useful type
 * Change Log:
 * 0. Creating a new type
 * 1. asdf
 */
/**
 * @param test_field2 A reference
 *
 * @sealed
 */
class Test2_V1 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly test_field2: Test.h_31cd9f3eb7d5e94d9544cfdc740e0830bf68bff85ae4f81f0d25d0e4c9c7c499;

  constructor(
    test_field2: Test.h_31cd9f3eb7d5e94d9544cfdc740e0830bf68bff85ae4f81f0d25d0e4c9c7c499
  ) {
    this._type = \\"Test2\\";
    this.version = 1;
    this.hash =
      \\"86efd7ca23593bb2c1c9b4da08723bd42c922231550dcd0e54e8695b4473b40c\\";
    this.test_field2 = test_field2;
  }

  static deserialize(message: any): Test2_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test2_V1(message.test_field2);
  }

  static serialize(message: Test2_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test2_V1,
  Test2_V1 as Test2_H86efd7ca23593bb2c1c9b4da08723bd42c922231550dcd0e54e8695b4473b40c
};

export class Test2 {
  static deserialize(message: any): Test2_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test2_V1\\":
      case \\"Test2_H86efd7ca23593bb2c1c9b4da08723bd42c922231550dcd0e54e8695b4473b40c\\":
        return new Test2_V1(message.test_field2);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test2_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Rename a field 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * Test
 * Test
 * Change Log:
 * 0. Creating a new type
 * 1. Adding a field
 * 2. Renaming a field
 */
/**
 * @param renamed_field A field that helps testing
 *
 * @sealed
 */
class Test_V0 {
  readonly _type: string;
  readonly version: number;
  readonly hash: string;
  readonly renamed_field: string | null;

  constructor(renamed_field: string | null) {
    this._type = \\"Test\\";
    this.version = 0;
    this.hash =
      \\"e41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf\\";
    this.renamed_field = renamed_field || \\"A value\\";
  }

  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new Test_V0(message.renamed_field);
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  Test_V0,
  Test_V0 as Test_He41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf
};

export class Test {
  static deserialize(message: any): Test_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"Test_V0\\":
      case \\"Test_He41f7b607671faf485204483dcf344ef15bbd2856a51485d9876e73178fe07bf\\":
        return new Test_V0(message.renamed_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: Test_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`Rename a field 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
"
`;

exports[`Rename a field 3`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
import * as request from \\"request-promise-native\\";

import { Test, Test_V0 } from \\"./types\\";

export class Client {
  host: string;
  constructor(host: string) {
    this.host = host;
  }
}
"
`;
