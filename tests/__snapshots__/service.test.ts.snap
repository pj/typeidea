// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`simple_service 1`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";
/*
 * undefined
 * An awesome output type
 * Change Log:
 * 0. Needs this for testing new type
 * 1. Needs this for testing new output type
 */
/**

*
* @sealed
*/
class undefined_V0 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 0;
    this.hash =
      \\"227acbb84ab41510807a6933289673be1f3e5c149a3dae1044e6fb0cde7d07b5\\";
  }

  static deserialize(message: any): undefined_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new undefined_V0();
  }

  static serialize(message: undefined_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  undefined_V0,
  undefined_V0 as undefined_H227acbb84ab41510807a6933289673be1f3e5c149a3dae1044e6fb0cde7d07b5
};

/**

*
* @sealed
*/
class undefined_V1 {
  readonly version: number;
  readonly hash: string;

  constructor() {
    this.version = 1;
    this.hash =
      \\"9a4db3ca121ae00860299b26e72d0e53fecccd2bd36c67c17a07ecfb044d38be\\";
  }

  static deserialize(message: any): undefined_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new undefined_V1();
  }

  static serialize(message: undefined_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  undefined_V1,
  undefined_V1 as undefined_H9a4db3ca121ae00860299b26e72d0e53fecccd2bd36c67c17a07ecfb044d38be
};

export class undefined {
  static deserialize(message: any): undefined_V0 | undefined_V1 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"undefined_V0\\":
      case \\"undefined_H227acbb84ab41510807a6933289673be1f3e5c149a3dae1044e6fb0cde7d07b5\\":
        return new undefined_V0();

      case \\"undefined_V1\\":
      case \\"undefined_H9a4db3ca121ae00860299b26e72d0e53fecccd2bd36c67c17a07ecfb044d38be\\":
        return new undefined_V1();

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: undefined_V0 | undefined_V1): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

/*
 * TestInputType
 *
 * Change Log:
 * 0. Need this for testing add field input
 */
/**
 * @param a_field An awesome field on the input type
 *
 * @sealed
 */
class TestInputType_V0 {
  readonly version: number;
  readonly hash: string;
  readonly a_field: string;

  constructor(a_field: string) {
    this.version = 0;
    this.hash =
      \\"2a4ac149eb73be86222802523a7cec23e6f64916c1c53117c575b1ed50271c6b\\";
    this.a_field = a_field;
  }

  static deserialize(message: any): TestInputType_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new TestInputType_V0(message.a_field);
  }

  static serialize(message: TestInputType_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  TestInputType_V0,
  TestInputType_V0 as TestInputType_H2a4ac149eb73be86222802523a7cec23e6f64916c1c53117c575b1ed50271c6b
};

export class TestInputType {
  static deserialize(message: any): TestInputType_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"TestInputType_V0\\":
      case \\"TestInputType_H2a4ac149eb73be86222802523a7cec23e6f64916c1c53117c575b1ed50271c6b\\":
        return new TestInputType_V0(message.a_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: TestInputType_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

/*
 * TestOutputType
 *
 * Change Log:
 * 0. Need this field for testing new output type
 */
/**
 * @param a_field An awesome field on the output type
 *
 * @sealed
 */
class TestOutputType_V0 {
  readonly version: number;
  readonly hash: string;
  readonly a_field: string;

  constructor(a_field: string) {
    this.version = 0;
    this.hash =
      \\"86265c08059868abadf9e9d34460a22f7549e838aa3e1dd03795d0e376ade492\\";
    this.a_field = a_field;
  }

  static deserialize(message: any): TestOutputType_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return new TestOutputType_V0(message.a_field);
  }

  static serialize(message: TestOutputType_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}

export {
  TestOutputType_V0,
  TestOutputType_V0 as TestOutputType_H86265c08059868abadf9e9d34460a22f7549e838aa3e1dd03795d0e376ade492
};

export class TestOutputType {
  static deserialize(message: any): TestOutputType_V0 {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    switch (message.version) {
      case \\"TestOutputType_V0\\":
      case \\"TestOutputType_H86265c08059868abadf9e9d34460a22f7549e838aa3e1dd03795d0e376ade492\\":
        return new TestOutputType_V0(message.a_field);

      default:
        throw new Error(
          \\"Unknown version error or version not present: \\" + message
        );
    }
  }

  static serialize(message: TestOutputType_V0): string {
    if (message.version === null || message.version === undefined) {
      throw new Error(\\"version not present: \\" + message);
    }
    return JSON.stringify(message);
  }
}
"
`;

exports[`simple_service 2`] = `
"/**
 * **GENERATED CODE DO NOT EDIT!**
 */
import { Request, Response } from \\"express\\";

/*
 * AwesomeService
 *
 * An awesome service
 */
import {
  TestOutputType_V1,
  TestOutputType,
  TestInputType_V1,
  TestInputType
} from \\"./types\\";

const AwesomeServiceDefinitions = new Map();

function AwesomeService(
  app: any,
  func: (TestInputType_V1) => TestOutputType_V1
): void {
  AwesomeService.set(\\"TestInputType_V1\\", func);
}

function AwesomeServiceExpress(app: any): void {
  for (let inputVersion of [\\"TestInputType_V1\\"]) {
    if (!AwesomeServiceDefinitions.has(inputVersion)) {
      throw new Error(
        \\"Service definition required for input version: \\" + inputVersion
      );
    }
  }

  app.post(\\"/AwesomeService\\", (req: Request, res: Response) => {
    const body = req.body;
    switch (body[\\"type\\"] + \\"_\\" + body[\\"version\\"]) {
      case \\"TestInputType_V1\\":
        const inputMessage = TestInputType_V1.deserialize(body);
        const func = AwesomeServiceDefinitions.get(\\"TestInputType_V1\\");
        const response = func(inputMessage);
        const outputMessage = TestOutputType.serialize(response);
        res.json(outputMessage);
        return;
      default:
        throw new Error(\\"Unknown input type: \\" + body);
    }
  });
}

export {
  AwesomeService,
  AwesomeServiceExpress
  // <%= service.name %> as service,
  // serviceName
};
"
`;

exports[`simple_service 3`] = `"\\"{\\\\\\"version\\\\\\":1,\\\\\\"hash\\\\\\":\\\\\\"c503f8a6a87dcd268e82e6cffa2e58db72866839a676faa2df84f470f889ae80\\\\\\",\\\\\\"a_field\\\\\\":\\\\\\"hello world\\\\\\"}\\""`;
