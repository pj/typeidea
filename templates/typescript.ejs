/**
* **GENERATED CODE DO NOT EDIT!**
*/
<% types.forEach(function (type) { -%>
/*
* <%= type.name %>
* <%= type.description %>
* Change Log:
  <% type.changeLog.forEach(function (log, index) { -%>
* <%= index + 1 %>. <%= log %>
  <%_ }) -%>
*/
<% }) %>
<% types.forEach(function (type) { %>
  <% type.versions.forEach(function (version) { %>
    <% Object.keys(version.fields).forEach(function (key) { -%>
      <% var field = version.fields[key]; %>
      <% if (field.referenceType) { %>
        // import * as <%= field.referenceType %> from './<%= field.referenceType %>';
      <% } %>
    <% }) %>
  <% }) %>
<% }) %>

<% types.forEach(function (type) { %>
  <% type.versions.forEach(function (version, index) { %>
    <%- include('typescript_class', {className: type.name + '_H' + version.hash, version: version}); %>

    export type <%= type.name %>_V<%= index %> = <%= type.name %>_H<%= version.hash %>;
  <% }) %>
  <% if (type.latest !== null) { %>
    <% include('typescript_class', {className: 'Latest', version: type.latest}); %>
  <% } %>

  export class <%= type.name %> {
    deserialize(message: any):
      <%= type.versions.map((version, index) => type.name + '_V' + index).join(' | ') %> {
      return null;
    }
    serialize(message:
      <%= type.versions.map((version, index) => type.name + '_V' + index).join(' | ') %>
    ): any {
      return null;
    }
  }
<% }) %>

