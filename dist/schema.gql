# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

union Action = NewTypeAction | RenameFieldTypeAction | RequiredFieldTypeAction | OptionalFieldTypeAction | DeleteFieldTypeAction | SetDefaultFieldTypeAction | RemoveDefaultFieldTypeAction | AddFieldTypeAction | UpdateDescriptionTypeAction | ReferenceFieldTypeAction | NewServiceAction | UpdateDescriptionServiceAction | AddVersionServiceAction

type AddFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
  _type: FieldTypes!
  description: String!
  optional: Boolean!
  _default: FieldDefaults
}

type AddFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
  _type: FieldTypes!
  description: String!
  optional: Boolean!
  _default: FieldDefaults
}

input AddFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
  _type: FieldTypes!
  description: String!
  optional: Boolean!
  _default: FieldDataInput!
}

type AddVersionServiceAction {
  hash: String!
  version: Float!
  changeLog: String!
  serviceName: String!
  inputType: String!
  outputType: String!
  inputVersion: Float!
  inputHash: String!
  outputVersion: Float!
  outputHash: String!
}

type AddVersionServiceChangeAction {
  changeLog: String!
  serviceName: String!
  inputType: String!
  outputType: String!
  inputVersion: Float!
  inputHash: String!
  outputVersion: Float!
  outputHash: String!
}

input AddVersionServiceInputAction {
  changeLog: String!
  serviceName: String!
  inputType: String!
  outputType: String!
  inputVersion: Float!
  inputHash: String!
  outputVersion: Float!
  outputHash: String!
}

interface BaseField {
  name: String!
  changeLog: String!
  description: String!
  optional: Boolean!
}

type BooleanField {
  value: Boolean!
}

union ChangeAction = NewTypeChangeAction | RenameFieldTypeChangeAction | RequiredFieldTypeChangeAction | OptionalFieldTypeChangeAction | DeleteFieldTypeChangeAction | SetDefaultFieldTypeChangeAction | RemoveDefaultFieldTypeChangeAction | AddFieldTypeChangeAction | UpdateDescriptionTypeChangeAction | ReferenceFieldTypeChangeAction | NewServiceChangeAction | UpdateDescriptionServiceChangeAction | AddVersionServiceChangeAction

type ChangeSet {
  id: String!
  log: [ChangeAction!]!
  baseHash: String
}

input ChangeSetAction {
  newService: NewServiceInputAction
  updateServiceDescription: UpdateDescriptionServiceInputAction
  addVersion: AddVersionServiceInputAction
  renameField: RenameFieldTypeInputAction
  requiredField: RequiredFieldTypeInputAction
  optionalField: OptionalFieldTypeInputAction
  deleteField: DeleteFieldTypeInputAction
  setDefault: SetDefaultFieldTypeInputAction
  removeDefault: RemoveDefaultFieldTypeInputAction
  addField: AddFieldTypeInputAction
  updateTypeDescription: UpdateDescriptionTypeInputAction
  referenceField: ReferenceFieldTypeInputAction
  newType: NewTypeInputAction
}

input ChangeSetInput {
  id: String!
  baseHash: String!
  actions: [ChangeSetAction!]!
}

type CommitOutput {
  log: [GroupAction!]!
  types: [Type!]!
  services: [Service!]!
  changeSets: [ChangeSet!]!
}

type DeleteFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
}

type DeleteFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
}

input DeleteFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
}

type Field implements BaseField {
  name: String!
  changeLog: String!
  description: String!
  optional: Boolean!
  type: FieldTypes!
  _default: FieldDefaults
}

input FieldDataInput {
  stringValue: String
  integerValue: Float
  floatValue: Float
  booleanValue: Boolean
}

union FieldDefaults = StringField | BooleanField | FloatField | IntegerField

type FieldObject {
  name: String!
  field: BaseField!
}

enum FieldTypes {
  STRING
  BOOLEAN
  INTEGER
  FLOAT
}

type FloatField {
  value: Float!
}

type GroupAction {
  hash: String!
  version: Float!
  actionType: String!
  actions: [Action!]!
}

type IntegerField {
  value: Int!
}

type Mutation {
  updateChangeSet(changeSet: ChangeSetInput!): ChangeSet!
  commitChangeSet(changeSetId: String!): CommitOutput!
  deleteChangeSet(changeSetId: String!): [ChangeSet!]!
}

type NewServiceAction {
  hash: String!
  version: Float!
  changeLog: String!
  serviceName: String!
  description: String!
}

type NewServiceChangeAction {
  changeLog: String!
  serviceName: String!
  description: String!
}

input NewServiceInputAction {
  changeLog: String!
  serviceName: String!
  description: String!
}

type NewTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  description: String!
}

type NewTypeChangeAction {
  changeLog: String!
  typeName: String!
  description: String!
}

input NewTypeInputAction {
  changeLog: String!
  typeName: String!
  description: String!
}

type OptionalFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
}

type OptionalFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
}

input OptionalFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
}

type Query {
  log: [GroupAction!]!
  types: [Type!]!
  services: [Service!]!
  changeSet(changeSetId: String!): ChangeSet!
  changeSets: [ChangeSet!]!
}

type ReferenceField implements BaseField {
  name: String!
  changeLog: String!
  description: String!
  optional: Boolean!
  referenceType: String!
  referenceHash: String
  referenceVersion: Float
}

type ReferenceFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
  optional: Boolean!
  referenceType: String!
  referenceHash: String!
  referenceVersion: Float!
}

type ReferenceFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
  optional: Boolean!
  referenceType: String!
  referenceHash: String!
  referenceVersion: Float!
}

input ReferenceFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
  optional: Boolean!
  referenceType: String!
  referenceHash: String!
  referenceVersion: Float!
}

type RemoveDefaultFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
}

type RemoveDefaultFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
}

input RemoveDefaultFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
}

type RenameFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  _from: String!
  to: String!
}

type RenameFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  _from: String!
  to: String!
}

input RenameFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  _from: String!
  to: String!
}

type RequiredFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
}

type RequiredFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
}

input RequiredFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
}

type Service {
  name: String!
  changeLog: [String!]!
  description: String!
  versions: [ServiceVersionType!]!
}

type ServiceVersionType {
  output: VersionType!
  inputs: [VersionType!]!
}

type SetDefaultFieldTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
  _default: FieldDefaults!
}

type SetDefaultFieldTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
  _default: FieldDefaults!
}

input SetDefaultFieldTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
  _default: FieldDataInput!
}

type StringField {
  value: String!
}

type Type {
  name: String!
  versions: [Version!]!
  changeSetName: String
  changeLog: [String!]!
  description: String!
}

type UpdateDescriptionServiceAction {
  hash: String!
  version: Float!
  changeLog: String!
  serviceName: String!
  description: String!
}

type UpdateDescriptionServiceChangeAction {
  changeLog: String!
  serviceName: String!
  description: String!
}

input UpdateDescriptionServiceInputAction {
  changeLog: String!
  serviceName: String!
  description: String!
}

type UpdateDescriptionTypeAction {
  hash: String!
  version: Float!
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
}

type UpdateDescriptionTypeChangeAction {
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
}

input UpdateDescriptionTypeInputAction {
  changeLog: String!
  typeName: String!
  name: String!
  description: String!
}

type Version {
  _type: String!
  version: Float!
  hash: String!
  fields: FieldObject!
}

type VersionType {
  _type: String!
  version: Float!
  hash: String!
}
